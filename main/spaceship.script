go.property("max_speed",400) --define max_speed and accel with go.property() so that their values can be changed from the editor
go.property("accel", 5)
local directions = {[hash("up")]=vmath.vector3(0,1,0),[hash("down")]=vmath.vector3(0,-1,0),[hash("right")]=vmath.vector3(1,0,0),[hash("left")]=vmath.vector3(-1,0,0)}
--define corresponding vector information for each direction in the directions table (array)
local click_vector=vmath.vector3()--define click_vector as an empty vector

function init(self)
	msg.post(".", "acquire_input_focus")--make this game object listen to input, allows information to be processed in the on_input() function
	self.movement = vmath.vector3()--define movement as an empty 3d vector
	self.moving={[hash("up")]=false,--define a table to keep track of all possible key presses so that 
				[hash("down")]=false,--acceleration and deceleration can be easily handled and identified
				[hash("right")]=false,--for each plane of movement
				[hash("left")]=false,
				[hash("click")]=false
				}
end

function alter_speed(self)--function to handle acceleration and deceleration
	--north movement
	if(self.moving[hash("up")]) then--if moving in the up direction/the up key is held down
		self.movement.y=math.min(self.movement.y+self.accel,self.max_speed)--increase the speed at increments of self.accel on the y plane, up to a maximum of self.max_speed
	elseif (not(self.moving[hash("down")])) then--else if the up key is not being held down, and the player is not moving downwards
		if(self.movement.y>0)then--if the movement vector's y value is greater than 0
			self.movement.y=math.max(self.movement.y-self.accel,0)--then decelerate the movement on the y plane, down to a minimum of 0
		end--the same theory is applied for the other directions
	end
	--south movement
	if(self.moving[hash("down")]) then
		self.movement.y=math.max(self.movement.y-self.accel,-self.max_speed)
	elseif (not(self.moving[hash("up")])) then
		if(self.movement.y<0)then
			self.movement.y=math.min(self.movement.y+self.accel,0)
		end
	end
	--east movement
	if(self.moving[hash("right")]) then
		self.movement.x=math.min(self.movement.x+self.accel,self.max_speed)
	elseif (not(self.moving[hash("left")])) then
		if(self.movement.x>0)then
			self.movement.x=math.max(self.movement.x-self.accel,0)
		end
	end
	--west movement
	if(self.moving[hash("left")]) then
		self.movement.x=math.max(self.movement.x-self.accel,-self.max_speed)
	elseif (not(self.moving[hash("right")])) then
		if(self.movement.x<0)then
			self.movement.x=math.min(self.movement.x+self.accel,0)
		end
	end
end

function ReflectionCheck(self,cur_pos)--function to handle bouncing off of objects
	local result_vector=self.movement--store the current movement vector as the default value
	if cur_pos.x>1280 then--check the current position to see if the player is out of bounds
		result_vector = self.movement - (2 * (vmath.dot(self.movement, directions[hash("right")]))*directions[hash("right")])
		--[[if they are, calculate the relection vector, which is done through using the formula
		r=d−2(d⋅n)n
		where r = reflected vector,
		d=current movement vector
		and n=the movement vector of the object being bounced off of
		N.B - the vector n must be normalized, that is, its total length must be equal to 1. However, we
		dont need to worry about that, as I used the values from the directions table to represent the 
		vector of the object being bounced off of
		]]--
	elseif cur_pos.x<0 then
		result_vector = self.movement - (2*(vmath.dot(self.movement, directions[hash("left")]))*directions[hash("left")])
	end
	if(cur_pos.y>720)then
		result_vector = self.movement - (2*(vmath.dot(self.movement, directions[hash("up")]))*directions[hash("up")])
	elseif(cur_pos.y<0)then
		result_vector = self.movement - (2*(vmath.dot(self.movement, directions[hash("down")]))*directions[hash("down")])
	end
	return result_vector--return the result 
end

function update(self, dt)--update function, called every frame
	alter_speed(self)--adjust the movement vector 
	local p = go.get_position()--get the current location
	go.set_position(p+(self.movement*dt))--apply the movement vector, multiplied by the delta time
	-- (duration of one frame) to the current location, to smoothen out the visual transition
	self.movement = ReflectionCheck(self,go.get_position()) --check to see if the vector must be reflected
end

function on_input(self, action_id, action)
	for key,value in pairs(directions) do--search through all values in the directions table 
		if(action_id == key)then--if they have the same value as the action_key
			if(action.released) then--and the button is being released, 
				self.moving[key] = false--then disable the flag for that key
			else
				self.movement = self.movement + value--otherwise, increase the movement vector by the associated value
				self.moving[key] = true--and enable the flag
			end
		end
	end
	if action_id == hash("click")then--if the player clicked
		if action.repeated then--and have held down the click button
			click_vector=vmath.vector3()
			local p = go.get_position()
			p.x = action.x - p.x--calculate the distance between the player and the target on the x and y planes
			p.y = action.y - p.y
			if(p.x>0)then--if the x value is positive, they are moving to the right, therefore
				self.moving[hash("left")]=false--disable the left flag, as you cant move left and right at the same time 
				self.moving[hash("right")]=true--and enable the right flag
			elseif (p.x<0)then--otherwise they are moving to the left, and thus
				self.moving[hash("right")]=false--disable the right flag
				self.moving[hash("left")]=true--and enable the left one
			end--the same theory is applied for the checks for the y value, except that they are either moving up/down
			if(p.y>0)then
				self.moving[hash("down")]=false
				self.moving[hash("up")]=true
			elseif (p.y<0)then
				self.moving[hash("up")]=false
				self.moving[hash("down")]=true
			end
			local scale = 1/math.sqrt(p.x^2 + p.y^2)--[[using pythagoreams theorem, find the length of the quickest distance 
			towards the target and divide 1 by the value, to allow us to scale the movement values below 1. As we dont intend 
			to instantly move to the target location with one movement jump, and due to us managing acceleration and 
			deceleration ourselves, it is only important for the direction [ratio of the co-ordinates] to be retained and not
			the magnitude [size of the co-ordinates]]--
			click_vector=vmath.vector3(p.x*scale,p.y*scale,0)--multiply the x and y values by the scale and store it in the
			--click_vector
			self.movement=self.movement + click_vector--add the click_vector value to the current movement vector
		elseif(action.released)then--if the player stops clicking
			for key,value in pairs(self.moving) do--loop through the key presses flags
				self.moving[key]=false--and deactivate all of them
			end
		end
	end
end